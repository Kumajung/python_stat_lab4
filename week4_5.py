""" Example
р╕Щр╕▒р╕Бр╕зр╕┤р╕Ир╕▒р╕вр╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕зр╣Ир╕▓ GPA р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Вр╕нр╕Зр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╣Гр╕Щр╣Вр╕гр╕Зр╣Ар╕гр╕╡р╕вр╕Щр╣Бр╕лр╣Ир╕Зр╕лр╕Щр╕╢р╣Ир╕Зр╣Ар╕Бр╕┤р╕Щр╕Бр╕зр╣Ир╕▓ 3.0
р╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕кр╕╕р╣Ир╕бр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е GPA р╕Вр╕нр╕Зр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╕Ир╕│р╕Щр╕зр╕Щ 1,000 р╕Др╕Щ
р╣Вр╕Фр╕вр╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Ир╕▓р╕Бр╕ар╕▓р╕вр╕Щр╕нр╕Бр╣Др╕Яр╕ер╣М gpa_data.csv
р╕Чр╕╡р╣Ир╕гр╕░р╕Фр╕▒р╕Ър╕Щр╕▒р╕вр╕кр╕│р╕Др╕▒р╕Н ЁЭЫ╝ = 0.05 р╣Гр╕лр╣Йр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕бр╕бр╕Хр╕┤р╕Рр╕▓р╕Щр╕зр╣Ир╕▓ GPA р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Вр╕нр╕Зр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╣Гр╕Щр╣Вр╕гр╕Зр╣Ар╕гр╕╡р╕вр╕Щр╣Бр╕лр╣Ир╕Зр╕Щр╕╡р╣Йр╣Ар╕Бр╕┤р╕Щр╕Бр╕зр╣Ир╕▓ 3.0
"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import norm

# Step 1: р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М CSV
file_path = "/kaggle/input/gpa-data/gpa_data.csv"  # р╕гр╕░р╕Ър╕╕р╣Ар╕кр╣Йр╕Щр╕Чр╕▓р╕Зр╣Др╕Яр╕ер╣М CSV
data = pd.read_csv(file_path)
gpa_data = data['GPA'].values  # р╕кр╕бр╕бр╕Хр╕┤р╕зр╣Ир╕▓р╕Др╕нр╕ер╕▒р╕бр╕Щр╣М GPA р╕бр╕╡р╕Кр╕╖р╣Ир╕нр╕зр╣Ир╕▓ 'GPA'

# р╕Др╣Ир╕▓р╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Ыр╕гр╕░р╕Кр╕▓р╕Бр╕гр╣Бр╕ер╕░р╕гр╕░р╕Фр╕▒р╕Ър╕Щр╕▒р╕вр╕кр╕│р╕Др╕▒р╕Н
population_mean = 3.0  # р╕Др╣Ир╕▓ GPA р╕Чр╕╡р╣Ир╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Ир╕▓р╕Бр╕Ыр╕гр╕░р╕Кр╕▓р╕Бр╕г
alpha = 0.05  # р╕гр╕░р╕Фр╕▒р╕Ър╕Щр╕▒р╕вр╕кр╕│р╕Др╕▒р╕Н

# Step 2: р╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╣Бр╕ер╕░р╕Вр╕Щр╕▓р╕Фр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З
sample_mean = np.mean(gpa_data)  # р╕Др╣Ир╕▓р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З
sample_size = len(gpa_data)  # р╕Вр╕Щр╕▓р╕Фр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З

# р╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓р╣Ар╕Ър╕╡р╣Ир╕вр╕Зр╣Ар╕Ър╕Щр╕бр╕▓р╕Хр╕гр╕Рр╕▓р╕Щр╕Вр╕нр╕Зр╕Ыр╕гр╕░р╕Кр╕▓р╕Бр╕г (Population Standard Deviation)
population_std_dev = np.sqrt(np.sum((gpa_data - sample_mean) ** 2) / len(gpa_data))

# Step 3: р╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓ z-critical
z_critical = norm.ppf(1 - alpha)  # р╕Др╣Ир╕▓ critical value р╕Вр╕нр╕З z р╕кр╕│р╕лр╕гр╕▒р╕Ъ one-tailed test

# Step 4: р╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓ z-test
z_test = (sample_mean - population_mean) / (population_std_dev / np.sqrt(sample_size))

# Step 5: р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Бр╕гр╕▓р╕Яр╣Бр╕кр╕Фр╕Зр╕Ьр╕е
x = np.linspace(-4, 4, 1000)  # р╕кр╕гр╣Йр╕▓р╕Зр╕Кр╣Ир╕зр╕Зр╕Др╣Ир╕▓ z-score
y = norm.pdf(x, 0, 1)  # р╕Др╕│р╕Щр╕зр╕Ур╕Др╣Ир╕▓ density р╕Вр╕нр╕Зр╕Бр╕▓р╕гр╣Бр╕Ир╕Бр╣Бр╕Ир╕Зр╕Ыр╕Бр╕Хр╕┤р╕бр╕▓р╕Хр╕гр╕Рр╕▓р╕Щ

# Plot р╕Бр╕гр╕▓р╕Я
plt.figure(figsize=(10, 6))
plt.plot(x, y, label='Standard Normal Distribution', color='blue')  # р╣Ар╕кр╣Йр╕Щр╕Бр╕гр╕▓р╕Яр╕Бр╕▓р╕гр╣Бр╕Ир╕Бр╣Бр╕Ир╕Зр╕Ыр╕Бр╕Хр╕┤
plt.axvline(z_critical, color='red', linestyle='--', label=f'Critical Value (z = {round(z_critical, 2)})')  # р╣Ар╕кр╣Йр╕Щр╕Др╣Ир╕▓р╕зр╕┤р╕Бр╕др╕Х
plt.axvline(z_test, color='green', linestyle='--', label=f'Test Value (z = {round(z_test, 2)})')  # р╣Ар╕кр╣Йр╕Щр╕Др╣Ир╕▓р╕Чр╕Фр╕кр╕нр╕Ъ
plt.fill_between(x, y, 0, where=(x > z_critical), color='red', alpha=0.3, label='Rejection Region')  # р╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╕Ыр╕Пр╕┤р╣Ар╕кр╕Ш H0
plt.title('Right-Tailed Z-Test')
plt.xlabel('Z-Score')
plt.ylabel('Probability Density')
plt.legend()
plt.grid()
plt.show()

# Step 6: р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
print("р╕Др╣Ир╕▓р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З (sample mean):", round(sample_mean, 3))
print("р╕Др╣Ир╕▓р╕зр╕┤р╕Бр╕др╕Х (critical value):", round(z_critical, 3))
print("р╕Др╣Ир╕▓р╕Чр╕Фр╕кр╕нр╕Ъ (test value):", round(z_test, 3))

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Др╣Ир╕▓р╕Чр╕Фр╕кр╕нр╕Ър╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╕Ыр╕Пр╕┤р╣Ар╕кр╕Шр╕кр╕бр╕бр╕Хр╕┤р╕Рр╕▓р╕Щр╕зр╣Ир╕▓р╕Зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
if z_test > z_critical:
    print("р╕кр╕гр╕╕р╕Ы: р╕Ыр╕Пр╕┤р╣Ар╕кр╕Шр╕кр╕бр╕бр╕Хр╕┤р╕Рр╕▓р╕Щр╕зр╣Ир╕▓р╕З (Reject H0) р╣Бр╕ер╕░р╕вр╕нр╕бр╕гр╕▒р╕Ър╕зр╣Ир╕▓ GPA р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Вр╕нр╕Зр╕Щр╕▒р╕Бр╣Ар╕гр╕╡р╕вр╕Щр╣Ар╕Бр╕┤р╕Щр╕Бр╕зр╣Ир╕▓ 3.0")
else:
    print("р╕кр╕гр╕╕р╕Ы: р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ыр╕Пр╕┤р╣Ар╕кр╕Шр╕кр╕бр╕бр╕Хр╕┤р╕Рр╕▓р╕Щр╕зр╣Ир╕▓р╕З (Fail to Reject H0)")
